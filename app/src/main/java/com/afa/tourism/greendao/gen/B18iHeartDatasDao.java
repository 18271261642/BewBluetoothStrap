package com.afa.tourism.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.bozhilun.android.B18I.b18ibean.B18iHeartDatas;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "B18I_HEART_DATAS".
*/
public class B18iHeartDatasDao extends AbstractDao<B18iHeartDatas, Long> {

    public static final String TABLENAME = "B18I_HEART_DATAS";

    /**
     * Properties of entity B18iHeartDatas.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Ids = new Property(0, Long.class, "ids", true, "_id");
        public final static Property Id = new Property(1, int.class, "id", false, "ID");
        public final static Property Avg = new Property(2, int.class, "avg", false, "AVG");
        public final static Property Date = new Property(3, String.class, "date", false, "DATE");
        public final static Property Timestamp = new Property(4, long.class, "timestamp", false, "TIMESTAMP");
    }


    public B18iHeartDatasDao(DaoConfig config) {
        super(config);
    }
    
    public B18iHeartDatasDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"B18I_HEART_DATAS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: ids
                "\"ID\" INTEGER NOT NULL ," + // 1: id
                "\"AVG\" INTEGER NOT NULL ," + // 2: avg
                "\"DATE\" TEXT," + // 3: date
                "\"TIMESTAMP\" INTEGER NOT NULL );"); // 4: timestamp
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"B18I_HEART_DATAS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, B18iHeartDatas entity) {
        stmt.clearBindings();
 
        Long ids = entity.getIds();
        if (ids != null) {
            stmt.bindLong(1, ids);
        }
        stmt.bindLong(2, entity.getId());
        stmt.bindLong(3, entity.getAvg());
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(4, date);
        }
        stmt.bindLong(5, entity.getTimestamp());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, B18iHeartDatas entity) {
        stmt.clearBindings();
 
        Long ids = entity.getIds();
        if (ids != null) {
            stmt.bindLong(1, ids);
        }
        stmt.bindLong(2, entity.getId());
        stmt.bindLong(3, entity.getAvg());
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(4, date);
        }
        stmt.bindLong(5, entity.getTimestamp());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public B18iHeartDatas readEntity(Cursor cursor, int offset) {
        B18iHeartDatas entity = new B18iHeartDatas( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ids
            cursor.getInt(offset + 1), // id
            cursor.getInt(offset + 2), // avg
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // date
            cursor.getLong(offset + 4) // timestamp
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, B18iHeartDatas entity, int offset) {
        entity.setIds(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.getInt(offset + 1));
        entity.setAvg(cursor.getInt(offset + 2));
        entity.setDate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTimestamp(cursor.getLong(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(B18iHeartDatas entity, long rowId) {
        entity.setIds(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(B18iHeartDatas entity) {
        if(entity != null) {
            return entity.getIds();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(B18iHeartDatas entity) {
        return entity.getIds() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
