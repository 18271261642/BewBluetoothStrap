package com.afa.tourism.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.bozhilun.android.bean.AlarmClockBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ALARM_CLOCK_BEAN".
*/
public class AlarmClockBeanDao extends AbstractDao<AlarmClockBean, Long> {

    public static final String TABLENAME = "ALARM_CLOCK_BEAN";

    /**
     * Properties of entity AlarmClockBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Lanyaneme = new Property(1, String.class, "lanyaneme", false, "LANYANEME");
        public final static Property AddressMac = new Property(2, String.class, "addressMac", false, "ADDRESS_MAC");
        public final static Property BeginHour = new Property(3, String.class, "BeginHour", false, "BEGIN_HOUR");
        public final static Property Beginminte = new Property(4, String.class, "Beginminte", false, "BEGINMINTE");
        public final static Property UserId = new Property(5, String.class, "userId", false, "USER_ID");
        public final static Property IsOpen = new Property(6, int.class, "isOpen", false, "IS_OPEN");
        public final static Property Number = new Property(7, int.class, "number", false, "NUMBER");
        public final static Property Every = new Property(8, int.class, "every", false, "EVERY");
    }


    public AlarmClockBeanDao(DaoConfig config) {
        super(config);
    }
    
    public AlarmClockBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ALARM_CLOCK_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"LANYANEME\" TEXT NOT NULL ," + // 1: lanyaneme
                "\"ADDRESS_MAC\" TEXT NOT NULL ," + // 2: addressMac
                "\"BEGIN_HOUR\" TEXT NOT NULL ," + // 3: BeginHour
                "\"BEGINMINTE\" TEXT NOT NULL ," + // 4: Beginminte
                "\"USER_ID\" TEXT NOT NULL ," + // 5: userId
                "\"IS_OPEN\" INTEGER NOT NULL ," + // 6: isOpen
                "\"NUMBER\" INTEGER NOT NULL ," + // 7: number
                "\"EVERY\" INTEGER NOT NULL );"); // 8: every
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ALARM_CLOCK_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AlarmClockBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getLanyaneme());
        stmt.bindString(3, entity.getAddressMac());
        stmt.bindString(4, entity.getBeginHour());
        stmt.bindString(5, entity.getBeginminte());
        stmt.bindString(6, entity.getUserId());
        stmt.bindLong(7, entity.getIsOpen());
        stmt.bindLong(8, entity.getNumber());
        stmt.bindLong(9, entity.getEvery());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AlarmClockBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getLanyaneme());
        stmt.bindString(3, entity.getAddressMac());
        stmt.bindString(4, entity.getBeginHour());
        stmt.bindString(5, entity.getBeginminte());
        stmt.bindString(6, entity.getUserId());
        stmt.bindLong(7, entity.getIsOpen());
        stmt.bindLong(8, entity.getNumber());
        stmt.bindLong(9, entity.getEvery());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AlarmClockBean readEntity(Cursor cursor, int offset) {
        AlarmClockBean entity = new AlarmClockBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // lanyaneme
            cursor.getString(offset + 2), // addressMac
            cursor.getString(offset + 3), // BeginHour
            cursor.getString(offset + 4), // Beginminte
            cursor.getString(offset + 5), // userId
            cursor.getInt(offset + 6), // isOpen
            cursor.getInt(offset + 7), // number
            cursor.getInt(offset + 8) // every
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AlarmClockBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLanyaneme(cursor.getString(offset + 1));
        entity.setAddressMac(cursor.getString(offset + 2));
        entity.setBeginHour(cursor.getString(offset + 3));
        entity.setBeginminte(cursor.getString(offset + 4));
        entity.setUserId(cursor.getString(offset + 5));
        entity.setIsOpen(cursor.getInt(offset + 6));
        entity.setNumber(cursor.getInt(offset + 7));
        entity.setEvery(cursor.getInt(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AlarmClockBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AlarmClockBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AlarmClockBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
