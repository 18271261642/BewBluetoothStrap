package com.afa.tourism.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.bozhilun.android.bean.StepBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STEP_BEAN".
*/
public class StepBeanDao extends AbstractDao<StepBean, Long> {

    public static final String TABLENAME = "STEP_BEAN";

    /**
     * Properties of entity StepBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property StepNumber = new Property(1, int.class, "stepNumber", false, "STEP_NUMBER");
        public final static Property Distance = new Property(2, String.class, "distance", false, "DISTANCE");
        public final static Property Calories = new Property(3, int.class, "calories", false, "CALORIES");
        public final static Property UserId = new Property(4, String.class, "userId", false, "USER_ID");
        public final static Property DeviceCode = new Property(5, String.class, "deviceCode", false, "DEVICE_CODE");
        public final static Property Date = new Property(6, String.class, "date", false, "DATE");
        public final static Property Status = new Property(7, int.class, "status", false, "STATUS");
    }


    public StepBeanDao(DaoConfig config) {
        super(config);
    }
    
    public StepBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STEP_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"STEP_NUMBER\" INTEGER NOT NULL ," + // 1: stepNumber
                "\"DISTANCE\" TEXT," + // 2: distance
                "\"CALORIES\" INTEGER NOT NULL ," + // 3: calories
                "\"USER_ID\" TEXT NOT NULL ," + // 4: userId
                "\"DEVICE_CODE\" TEXT NOT NULL ," + // 5: deviceCode
                "\"DATE\" TEXT NOT NULL ," + // 6: date
                "\"STATUS\" INTEGER NOT NULL );"); // 7: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STEP_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, StepBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getStepNumber());
 
        String distance = entity.getDistance();
        if (distance != null) {
            stmt.bindString(3, distance);
        }
        stmt.bindLong(4, entity.getCalories());
        stmt.bindString(5, entity.getUserId());
        stmt.bindString(6, entity.getDeviceCode());
        stmt.bindString(7, entity.getDate());
        stmt.bindLong(8, entity.getStatus());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, StepBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getStepNumber());
 
        String distance = entity.getDistance();
        if (distance != null) {
            stmt.bindString(3, distance);
        }
        stmt.bindLong(4, entity.getCalories());
        stmt.bindString(5, entity.getUserId());
        stmt.bindString(6, entity.getDeviceCode());
        stmt.bindString(7, entity.getDate());
        stmt.bindLong(8, entity.getStatus());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public StepBean readEntity(Cursor cursor, int offset) {
        StepBean entity = new StepBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // stepNumber
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // distance
            cursor.getInt(offset + 3), // calories
            cursor.getString(offset + 4), // userId
            cursor.getString(offset + 5), // deviceCode
            cursor.getString(offset + 6), // date
            cursor.getInt(offset + 7) // status
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, StepBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStepNumber(cursor.getInt(offset + 1));
        entity.setDistance(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCalories(cursor.getInt(offset + 3));
        entity.setUserId(cursor.getString(offset + 4));
        entity.setDeviceCode(cursor.getString(offset + 5));
        entity.setDate(cursor.getString(offset + 6));
        entity.setStatus(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(StepBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(StepBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(StepBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
