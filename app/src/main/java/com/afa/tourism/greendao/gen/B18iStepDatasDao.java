package com.afa.tourism.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.bozhilun.android.B18I.b18ibean.B18iStepDatas;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "B18I_STEP_DATAS".
*/
public class B18iStepDatasDao extends AbstractDao<B18iStepDatas, Long> {

    public static final String TABLENAME = "B18I_STEP_DATAS";

    /**
     * Properties of entity B18iStepDatas.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Ids = new Property(0, Long.class, "ids", true, "_id");
        public final static Property Id = new Property(1, int.class, "id", false, "ID");
        public final static Property Step = new Property(2, int.class, "step", false, "STEP");
        public final static Property Distance = new Property(3, int.class, "distance", false, "DISTANCE");
        public final static Property Sporttime = new Property(4, int.class, "sporttime", false, "SPORTTIME");
        public final static Property Calories = new Property(5, int.class, "calories", false, "CALORIES");
        public final static Property Time = new Property(6, String.class, "time", false, "TIME");
        public final static Property Timestamp = new Property(7, long.class, "timestamp", false, "TIMESTAMP");
    }


    public B18iStepDatasDao(DaoConfig config) {
        super(config);
    }
    
    public B18iStepDatasDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"B18I_STEP_DATAS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: ids
                "\"ID\" INTEGER NOT NULL ," + // 1: id
                "\"STEP\" INTEGER NOT NULL ," + // 2: step
                "\"DISTANCE\" INTEGER NOT NULL ," + // 3: distance
                "\"SPORTTIME\" INTEGER NOT NULL ," + // 4: sporttime
                "\"CALORIES\" INTEGER NOT NULL ," + // 5: calories
                "\"TIME\" TEXT," + // 6: time
                "\"TIMESTAMP\" INTEGER NOT NULL );"); // 7: timestamp
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"B18I_STEP_DATAS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, B18iStepDatas entity) {
        stmt.clearBindings();
 
        Long ids = entity.getIds();
        if (ids != null) {
            stmt.bindLong(1, ids);
        }
        stmt.bindLong(2, entity.getId());
        stmt.bindLong(3, entity.getStep());
        stmt.bindLong(4, entity.getDistance());
        stmt.bindLong(5, entity.getSporttime());
        stmt.bindLong(6, entity.getCalories());
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(7, time);
        }
        stmt.bindLong(8, entity.getTimestamp());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, B18iStepDatas entity) {
        stmt.clearBindings();
 
        Long ids = entity.getIds();
        if (ids != null) {
            stmt.bindLong(1, ids);
        }
        stmt.bindLong(2, entity.getId());
        stmt.bindLong(3, entity.getStep());
        stmt.bindLong(4, entity.getDistance());
        stmt.bindLong(5, entity.getSporttime());
        stmt.bindLong(6, entity.getCalories());
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(7, time);
        }
        stmt.bindLong(8, entity.getTimestamp());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public B18iStepDatas readEntity(Cursor cursor, int offset) {
        B18iStepDatas entity = new B18iStepDatas( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ids
            cursor.getInt(offset + 1), // id
            cursor.getInt(offset + 2), // step
            cursor.getInt(offset + 3), // distance
            cursor.getInt(offset + 4), // sporttime
            cursor.getInt(offset + 5), // calories
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // time
            cursor.getLong(offset + 7) // timestamp
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, B18iStepDatas entity, int offset) {
        entity.setIds(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.getInt(offset + 1));
        entity.setStep(cursor.getInt(offset + 2));
        entity.setDistance(cursor.getInt(offset + 3));
        entity.setSporttime(cursor.getInt(offset + 4));
        entity.setCalories(cursor.getInt(offset + 5));
        entity.setTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTimestamp(cursor.getLong(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(B18iStepDatas entity, long rowId) {
        entity.setIds(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(B18iStepDatas entity) {
        if(entity != null) {
            return entity.getIds();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(B18iStepDatas entity) {
        return entity.getIds() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
